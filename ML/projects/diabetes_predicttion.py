# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GzhgHSEWX3-vZaeNVVg-trcoTgH2Wvd4

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn import svm

diabetes= pd.read_csv('/content/diabetes.csv')

diabetes.head()

diabetes.shape

#getting the statistical measures
diabetes.describe()

diabetes.isnull().sum()

diabetes['Outcome'].value_counts()

diabetes.groupby('Outcome').mean()

# seperating label and data
x = diabetes.drop(columns='Outcome',axis=1)
y = diabetes['Outcome']

print(x)
print(y)

scaler= StandardScaler()

std_data=scaler.fit_transform(x)

X =std_data

"""Train test split"""

x_train,x_test,y_train,y_test= train_test_split(X,y,stratify =y , test_size=0.2,random_state=2)

print(x_train.shape,x_test.shape)

y_train.value_counts()

y_test.value_counts()

classifier = svm.SVC(kernel = 'linear')

classifier.fit(x_train,y_train)

"""Model evaluation"""

#evaluating accuracy of the training data
training_prediction = classifier.predict(x_train)
training_accuracy = accuracy_score(training_prediction,y_train)
print(training_accuracy)

#evaluating accuracy of the testing data
testing_prediction = classifier.predict(x_test)
testing_accuracy = accuracy_score(testing_prediction,y_test)
print(testing_accuracy)

#evaluating whether input data is diabetic or not
input_data =(2,197,70,45,543,30.5,0.158,53)


x= np.asarray(input_data)
x_reshaped= x.reshape(1,-1)
std_input = scaler.transform(x_reshaped)
print(std_input)
y=classifier.predict(std_input)
print(y)

if y==1:
  print('the person is diabetic')
else:
  print('The person is non diabetic')

